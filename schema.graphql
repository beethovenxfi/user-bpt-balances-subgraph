# A unique address is referred to as a user
type User @entity {
  " Equals to: <userAddress>"
  id: ID!

  " User address "
  address: Bytes!

  walletTokens: [Bytes!]!
  gauges: [Bytes!]!
  farms: [String!]!

  " Token balances that this user holds in their wallet "
  walletBalances: [UserWalletBalance!]! @derivedFrom(field: "user")

  " Token balances that this user has staked in gauges"
  gaugeBalances: [UserGaugeBalance!]! @derivedFrom(field: "user")

  " Token balances that this user has staked in farms"
  farmBalances: [UserMasterChefFarmBalance!]! @derivedFrom(field: "user")
}

#
# Current token balance of a particular Ethereum account
#
type UserWalletBalance @entity {
  " Equals to: <accountAddress>-<tokenAddress>"
  id: ID!

  " Account address "
  user: User!

  " Token address "
  token: Token!

  " Current account balance "
  balance: BigDecimal!

  " Block number in which the balance was last modified "
  block: BigInt

  " Last modified timestamp in seconds "
  modified: BigInt

  " Hash of the last transaction that modified the balance "
  transaction: Bytes
}

#
# Token balance of a particular user at a certain timestamp. This entity is used to
# provide information about evolution of user balances
#
type UserBalanceSnapshot @entity {
  " Equals to: <userAddress>-<dayTimestamp>"
  id: ID!

  " Account address "
  user: User!

  " Timestamp in seconds, rounded down to the closest day "
  timestamp: Int!

  walletTokens: [Bytes!]!
  walletBalances: [BigDecimal!]!

  gauges: [Bytes!]!
  gaugeBalances: [BigDecimal!]!

  farms: [String!]!
  farmBalances: [BigDecimal!]!
}

#
# Provides information about an ERC20 token
#
type Token @entity(immutable: true) {
  id: ID!

  " Token address "
  address: Bytes!

  " Number of decimals the token uses "
  decimals: Int!

  " Human-readable name of the token "
  name: String!

  " Symbol of the token "
  symbol: String!

  " List of token events "
  events: [TokenEvent!]! @derivedFrom(field: "token")
}

#
# Token events
#
interface TokenEvent {
  id: ID!
  token: Token!
  amount: BigDecimal!
  sender: Bytes!

  block: BigInt!
  timestamp: BigInt!
  transaction: Bytes!
}

type TokenTransferEvent implements TokenEvent @entity(immutable: true) {
  id: ID!

  " Token address "
  token: Token!

  " Quantity of tokens transferred "
  amount: BigDecimal!

  " Transaction sender address "
  sender: Bytes!

  " Address of source account "
  source: Bytes!

  " Address of destination account "
  destination: Bytes!

  " Block number "
  block: BigInt!

  " Event timestamp "
  timestamp: BigInt!

  " Transaction hash "
  transaction: Bytes!
}

type Gauge @entity(immutable: true) {
  id: ID!
  symbol: String!
  " Token addess "
  token: Token!

  userGaugeBalances: [UserGaugeBalance!] @derivedFrom(field: "gauge")
}

type UserGaugeBalance @entity {
  id: ID!
  user: User!
  gauge: Gauge!
  balance: BigDecimal!

  " Block number in which the balance was last modified "
  block: BigInt

  " Last modified timestamp in seconds "
  modified: BigInt

  " Hash of the last transaction that modified the balance "
  transaction: Bytes
}


type MasterChefFarm @entity {
  # Index of pool in poolInfo on MasterChef contract
  id: ID!
  token: Token!

  userFarmBalances: [UserMasterChefFarmBalance!] @derivedFrom(field: "farm")
}

type UserMasterChefFarmBalance @entity {
  id: ID!
  user: User!
  farm: MasterChefFarm!
  balance: BigDecimal!
}

